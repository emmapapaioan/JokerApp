/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import pojo.Draw;
import pojo.Prizecategory;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @authors Lymperis Dimitrios 
 *          Papaioannou Emmanolia 
 *          Chatziioannou Ioannis
 */
public class ShowDataPerMonth extends javax.swing.JFrame {

    /**
     * Creates new form ShowDataPerMonth
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public ShowDataPerMonth() {
        initComponents();
        setTitle("JokerGame-Stats");
        //Βοηθητικό comboBox για αποθήκευση των μηνών ως αριθμούς.
        invisibleComboBox.setVisible(false);
        comboYears();

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                super.windowClosing(we);
            }
        });
    }

    //Μέθοδος που μετατρέπει ακέραιο αριθμό μήνα σε string με το όνομα του μήνα
    private String getMonth(int month) {
        String[] nameMonth = {"Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος",
            "Μάϊος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"};
        return nameMonth[month - 1];
    }

    //Μέθοδος που γεμίζει το ComboYearBox με τα αποθηκευμένα στη βάση δεδομένων έτη
    private void comboYears() {
        //Δημιουργία του EntityManagerFactory.
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JokerGameStatsPU");
        //Δημιουργία του EntityManager.
        EntityManager em = emf.createEntityManager();
        /*Από τη στήλη Date του πίνακα Draw επιλέγει το έτος(ομαδοποιεί τις ημερομηνίες με ίδιο έτος)
          από την ημερομηνία και το αποθηκεύει σε πίνακα κατά αύξουσα σειρά.*/
        Query selectDate = em.createNativeQuery("SELECT YEAR(DATE) AS YEARS FROM DRAW GROUP BY YEAR(DATE)");
        Object[] result = selectDate.getResultList().toArray();
        //Διατρέχει τον πίνακα result και προσθέτει τα έτη στο jComboYearBox.
        for (Object results : result) {
            comboYearBox.addItem(results.toString());
        }
        //Καταστροφή του EntityManager και του EntityManagerFactory.
        em.close();
        emf.close();
    }

    //Μέθοδος που γεμίζει το ComboMonthBox με τους αποθηκευμένους στη βάση δεδομένων μήνες, για επιλεγμένο έτος
    private void comboMonths() {
        //Δημιουργία του EntityManagerFactory.
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JokerGameStatsPU");
        //Δημιουργία του EntityManager.
        EntityManager em = emf.createEntityManager();
        /*Από τη στήλη Date του πίνακα Draw επιλέγει τους μήνες
          από την ημερομηνία και το αποθηκεύει σε πίνακα κατά αύξουσα σειρά.*/
        String year = comboYearBox.getSelectedItem().toString();
        Query selectDate = em.createNativeQuery("SELECT MONTH(DATE) AS MONTHS FROM DRAW WHERE YEAR(DATE)=" + year + " GROUP BY MONTH(DATE)");
        Object[] result = selectDate.getResultList().toArray();
        ArrayList<Integer> month = new ArrayList<>();
        /*Διατρέχει τον πίνακα result και αποθηκεύονται τα στοιχεία του στο πίνακα month
        με μετατροπή τους σε Integer.*/
        for (Object results : result) {
            month.add((Integer) results);
            invisibleComboBox.addItem(results.toString());
        }
        /*Για κάθε αριθμό που περιέχει ο πίνακας month, αποθηκεύετε στο comboMonthBox το όνομα
          του μήνα που αντιστοιχεί χρησιμοποιώντας τη μέθοδο getMonth.*/
        for (int i = 0; i < month.size(); i++) {
            comboMonthBox.addItem(this.getMonth(month.get(i)));
        }
        //Καταστροφή του EntityManager και του EntityManagerFactory.
        em.close();
        emf.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnHomeButton = new javax.swing.JButton();
        showDataLabel = new javax.swing.JLabel();
        comboYearBox = new javax.swing.JComboBox<>();
        yearLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        comboMonthBox = new javax.swing.JComboBox<>();
        SearchMonthButton = new javax.swing.JButton();
        invisibleComboBox = new javax.swing.JComboBox<>();
        backgroundLayer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(571, 429));
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        returnHomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_image1_1.png"))); // NOI18N
        returnHomeButton.setBorder(null);
        returnHomeButton.setBorderPainted(false);
        returnHomeButton.setContentAreaFilled(false);
        returnHomeButton.setFocusPainted(false);
        returnHomeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_image1click.png"))); // NOI18N
        returnHomeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_image1click.png"))); // NOI18N
        returnHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnHomeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(returnHomeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 60));

        showDataLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        showDataLabel.setForeground(new java.awt.Color(222, 222, 222)); //Αλλαγή χρώμα γραμμάτων σε λευκό
        showDataLabel.setText("Προβολή δεδομένων ");
        getContentPane().add(showDataLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 210, 50));

        comboYearBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboYearBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Επιλογή" }));
        comboYearBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboYearBoxActionPerformed(evt);
            }
        });
        getContentPane().add(comboYearBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, -1, -1));

        yearLabel.setText("Έτος:");
        yearLabel.setForeground(new java.awt.Color(222, 222, 222)); //Αλλαγή χρώμα γραμμάτων σε λευκό
        getContentPane().add(yearLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, -1, 20));

        monthLabel.setText("Μήνας:");
        monthLabel.setForeground(new java.awt.Color(222, 222, 222)); //Αλλαγή χρώμα γραμμάτων σε λευκό
        getContentPane().add(monthLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 160, -1, 20));

        comboMonthBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(comboMonthBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 160, -1, -1));

        SearchMonthButton.setBackground(new java.awt.Color(49, 144, 226));
        SearchMonthButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SearchMonthButton.setText("Αναζήτηση");
        SearchMonthButton.setForeground(new java.awt.Color(0, 0, 0));
        SearchMonthButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchMonthButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SearchMonthButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 230, 80, -1));

        getContentPane().add(invisibleComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        backgroundLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tzoker_image2.jpg"))); // NOI18N
        backgroundLayer.setText("jLabel1");
        backgroundLayer.setFocusCycleRoot(true);
        backgroundLayer.setPreferredSize(new java.awt.Dimension(570, 429));
        getContentPane().add(backgroundLayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 400));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void returnHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnHomeButtonActionPerformed
        //Δημιούργησε ένα αντικείμενο τύπου Home
        Home home = new Home();
        //Κάνε το αντικείμενο τύπου Home ορατό (Επιστροφή στην αρχική οθόνη)
        home.setVisible(true);
        //Κάνε το παράθυρο Διαχείρισης δεδομένων όχι ορατό
        this.setVisible(false);
        //Κλείσε το παράθυρο Διαχείρισης δεδομένων
        this.setDefaultCloseOperation(ShowDataPerMonth.EXIT_ON_CLOSE);
        //Κατέστρεψε το παράθυρο διαχείρισης δεδομένων
        this.dispose();
    }//GEN-LAST:event_returnHomeButtonActionPerformed

    private void SearchMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchMonthButtonActionPerformed
        if (comboYearBox.getSelectedIndex() != 0) {
            //Δημιουργία του EntityManagerFactory.
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JokerGameStatsPU");
            //Δημιουργία του EntityManager.
            EntityManager em = emf.createEntityManager();

            //Βοηθητικές μεταβλητές για να υπολογίσουμε και να αποθηκεύσουμε τα συγκεντρωτικά δεδομένα
            int countDraws;
            double countTotalDivident;
            int countJackpot;
            String year = comboYearBox.getSelectedItem().toString();
            String month = comboMonthBox.getSelectedItem().toString();
            invisibleComboBox.setSelectedIndex(comboMonthBox.getSelectedIndex());
            String month1 = invisibleComboBox.getSelectedItem().toString();

            //Δημιουργία κατάλληλης ερώτησης προς τη βάση δεδομένων
            Query selectDate = em.createNativeQuery("SELECT * FROM DRAW WHERE YEAR(DATE) = " + year + " AND MONTH(DATE) = " + month1, Draw.class);
            //Παίρνουμε τα αποτελέσματα της βάσης δεδομένων σε μια λίστα
            List<Draw> drawsPj = selectDate.getResultList();

            //Υπολογίζουμε πλήθος κληρώσεων
            countDraws = drawsPj.size();

            //Υπολογίζουμε πλήθος διανεμόμενων κερδών
            countTotalDivident = 0;
            double countDividentPerCategory;

            //Για κάθε κλήρωση
            for (Draw draw : drawsPj) {
                //Παίρνουμε σε λίστα τις 8 κατηγορίες κερδών ανά κλήρωση
                List<Prizecategory> prizeCategory = draw.getPrizecategoryList();
                for (Prizecategory prizeCategories : prizeCategory) {
                    //Υπολογίζουμε ανά κατηγορία επιτυχίας πόσα χρήματα διανεμήθηκαν
                    countDividentPerCategory = prizeCategories.getDivident() * prizeCategories.getWinners();
                    //Υπολογίζουμε συνολικά πόσα χρήματα διανεμήθηκαν 
                    countTotalDivident += countDividentPerCategory;
                }
            }

            //Υπολογίζουμε πλήθος ΤΖΑΚΠΟΤ
            countJackpot = 0;
            for (Draw draw : drawsPj) {
                //Παίρνουμε σε λίστα τις 8 κατηγορίες κερδών ανά κλήρωση
                List<Prizecategory> prizeCategory = draw.getPrizecategoryList();
                //Αν στην κατηγορία 5+1 δεν υπήρχε κανένας νικητής τότε έγινε TZAK-ΠΟΤ
                if (prizeCategory.get(0).getWinners() == 0) {
                    countJackpot++;
                }
                //Αν στην κατηγορία 5 δεν υπήρχε κανένας νικητής τότε έγινε TZAK-ΠΟΤ
                if (prizeCategory.get(1).getWinners() == 0) {
                    countJackpot++;
                }
            }

            //Καταστροφή του EntityManager και του EntityManagerFactory.
            em.close();
            emf.close();

            //Εμφάνιση double ως χρηματικό ποσό. 
            NumberFormat formatter = NumberFormat.getCurrencyInstance();
            String moneyString = formatter.format(countTotalDivident);

            //Δημιουργούμε ένα jframe στο οποίο θα εμφανιστούν τα αποτελέσματα
            ShowDataPerMonthFinal showDataPerMonthFinal = new ShowDataPerMonthFinal();
            //Κάνουμε το jframe showDataPerMonthFinal ορατό
            showDataPerMonthFinal.setVisible(true);
            //Ενημερώνουμε τον πίνακα του showDataPerMonthFinal με τα συγκεντρωτικά δεδομένα
            showDataPerMonthFinal.updateShowDataTable(countDraws, moneyString, countJackpot);
            //Ενημερώνουμε το label του showDataPerMonthFinal με μήνα και έτος επιλογής του χρήστη
            showDataPerMonthFinal.updateDateLabel(month, year);
            //Κάνε το παράθυρο ShowDataPerMonth όχι ορατό
            this.setVisible(false);
            //Κλείσε το παράθυρο ShowDataPerMonth
            this.setDefaultCloseOperation(ShowDataPerMonth.EXIT_ON_CLOSE);
            //Κατέστρεψε το παράθυρο ShowDataPerMonth
            this.dispose();
        } else {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }

    }//GEN-LAST:event_SearchMonthButtonActionPerformed

    private void comboYearBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboYearBoxActionPerformed
        if (comboYearBox.getSelectedIndex() != 0) {
            //Κάθε φορά που αλλάζει η επιλογή του έτους αφαιρούνται οι μήνες της προηγούμενης επιλογής.
            comboMonthBox.removeAllItems();
            invisibleComboBox.removeAllItems();
            //Γεμίζουμε το comboBox με τους μήνες που είναι αποθηκευμένοι για κάθε χρόνο
            comboMonths();
        } else {
            comboMonthBox.removeAllItems();
        }

    }//GEN-LAST:event_comboYearBoxActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int result = JOptionPane.showConfirmDialog(null, //Eνημερωτικό μήνυμα όταν ο χρήστης κλείνει την εφαρμογή
                "Η εφαρμογή θα τερματιστεί. Είστε σίγουροι;", "Τερματισμός εφαρμογής",
                JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            //Τερματισμός
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowDataPerMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowDataPerMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowDataPerMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowDataPerMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ShowDataPerMonth().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchMonthButton;
    private javax.swing.JLabel backgroundLayer;
    private javax.swing.JComboBox<String> comboMonthBox;
    private javax.swing.JComboBox<String> comboYearBox;
    private javax.swing.JComboBox<String> invisibleComboBox;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JButton returnHomeButton;
    private javax.swing.JLabel showDataLabel;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
