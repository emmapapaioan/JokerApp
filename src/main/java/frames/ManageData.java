/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import com.google.gson.*;
import org.emmapap.DateValidator;
import org.emmapap.DateValidatorUsingDateFormat;
import org.emmapap.Draws;
import org.emmapap.PrizeCategory;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import pojo.Draw;

import javax.persistence.*;
import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * @authors Papaioannou Emmanolia 
 *          Lymperis Dimitrios 
 *          Chatziioannou Ioannis
 */
public class ManageData extends javax.swing.JFrame {

    /**
     * Creates new form ManageData
     */
    //Kατασκευάζουμε ένα αντικείμενο τύπου Draws για να του περάσουμε τα δεδομένα κλήρωσης
    public Draws draw = new Draws();

    public ManageData() {
        initComponents();
        setTitle("JokerGame-Stats");
        addWindowListener(new WindowAdapter() {
            //Eνημερωτικό μήνυμα όταν ο χρήστης κλείνει την εφαρμογή
            @Override
            public void windowClosing(WindowEvent evt) {
                int result = JOptionPane.showConfirmDialog(null,
                        "Η εφαρμογή θα τερματιστεί. Είστε σίγουροι;", "Τερματισμός εφαρμογής",
                        JOptionPane.YES_NO_OPTION);

                if (JOptionPane.YES_OPTION == result) {
                    //Kαταστροφή παραθύρου
                    dispose();
                    //Τερματισμός
                    System.exit(0);
                }
            }
        });

        GameIdComboBox.setMaximumRowCount(6); //Max γραμμές combobox 6
        FromDateComboBox.setMaximumRowCount(6); //Max γραμμές combobox 6
        ToDateComboBox.setMaximumRowCount(6); //Max γραμμές combobox 6

        //Μεταβλητές που αποθηκεύουν τις ημερομηνίες για 2000-01-01 και σήμερα
        LocalDate startDate = LocalDate.of(2000, 01, 01);
        LocalDate endDate = LocalDate.now();
        long numOfDays = ChronoUnit.DAYS.between(startDate, endDate);

        //Για τα έτη 2000 έως 2022 φτιάξε λίστα με ημερομηνίες 
        List<LocalDate> listOfDates1 = Stream.iterate(startDate, date -> date.plusDays(1))
                .limit(numOfDays + 1)
                .collect(Collectors.toList());

        //Πρόσθεσε στα ToDateCombobox και ToDateComboBox1 ημερομηνίες
        for (int i = 0; i < listOfDates1.size(); i++) {
            ToDateComboBox.addItem(listOfDates1.get(i).toString());
            ToDateComboBox1.addItem(listOfDates1.get(i).toString());
        }

        //Πρόσθεσε στα FromDateCombobox και FromDateCombobox1 ημερομηνίες
        for (int i = 0; i < listOfDates1.size(); i++) {
            FromDateComboBox.addItem(listOfDates1.get(i).toString());
            FromDateComboBox1.addItem(listOfDates1.get(i).toString());
        }

        //Κάνε null την αρχική επιλογή των παρακάτω comboboxes
        GameIdComboBox.setSelectedItem(null);
        FromDateComboBox.setSelectedItem(null);
        ToDateComboBox.setSelectedItem(null);
        FromDateComboBox1.setSelectedItem(null);
        ToDateComboBox1.setSelectedItem(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnHomeButton = new javax.swing.JButton();
        manageDataLabel = new javax.swing.JLabel();
        GameIdComboBox = new javax.swing.JComboBox<>();
        gameIdLabel = new javax.swing.JLabel();
        fromDateLabel = new javax.swing.JLabel();
        toDateLabel = new javax.swing.JLabel();
        FromDateComboBox = new javax.swing.JComboBox<>();
        ToDateComboBox = new javax.swing.JComboBox<>();
        SearchDrawIdButton = new javax.swing.JButton();
        SearchDateButton = new javax.swing.JButton();
        deleteGameDataFromDateToDateButton = new javax.swing.JButton();
        deleteGameDataButton = new javax.swing.JButton();
        fromDateLabel1 = new javax.swing.JLabel();
        toDateLabel1 = new javax.swing.JLabel();
        GameIdComboBox1 = new javax.swing.JComboBox<>();
        FromDateComboBox1 = new javax.swing.JComboBox<>();
        ShowDataDateButton = new javax.swing.JButton();
        gameIdLabel1 = new javax.swing.JLabel();
        ToDateComboBox1 = new javax.swing.JComboBox<>();
        backgroundLayer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 570));
        setPreferredSize(new java.awt.Dimension(600, 500));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        returnHomeButton.setBackground(returnHomeButton.getBackground());
        returnHomeButton.setForeground(returnHomeButton.getBackground());
        returnHomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_image1_1.png"))); // NOI18N
        returnHomeButton.setBorder(null);
        returnHomeButton.setBorderPainted(false);
        returnHomeButton.setContentAreaFilled(false);
        returnHomeButton.setFocusPainted(false);
        returnHomeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_image1click.png"))); // NOI18N
        returnHomeButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home_image1click.png"))); // NOI18N
        returnHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnHomeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(returnHomeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 60, 60));

        manageDataLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        manageDataLabel.setForeground(new java.awt.Color(222, 222, 222)); //Αλλαγή χρώμα γραμμάτων σε λευκό
        manageDataLabel.setText("Διαχείριση δεδομένων ");
        getContentPane().add(manageDataLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 210, 50));

        GameIdComboBox.setBackground(new java.awt.Color(222, 222, 222));
        GameIdComboBox.setEditable(true);
        getContentPane().add(GameIdComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 150, 160, -1));

        gameIdLabel.setBackground(backgroundLayer.getBackground());
        gameIdLabel.setForeground(new java.awt.Color(222, 222, 222));
        gameIdLabel.setLabelFor(GameIdComboBox);
        gameIdLabel.setText("Κωδικός κλήρωσης:");
        gameIdLabel.setToolTipText("");
        getContentPane().add(gameIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, -1, 20));

        fromDateLabel.setForeground(new java.awt.Color(222, 222, 222)); //Αλλαγή χρώμα γραμμάτων
        fromDateLabel.setLabelFor(FromDateComboBox);
        fromDateLabel.setText("Από:");
        getContentPane().add(fromDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, -1, 20));

        toDateLabel.setLabelFor(ToDateComboBox);
        toDateLabel.setForeground(new java.awt.Color(222, 222, 222)); //Αλλαγή χρώμα γραμμάτων σε λευκό
        toDateLabel.setText("Εώς:");
        getContentPane().add(toDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, -1, 20));

        FromDateComboBox.setBackground(new java.awt.Color(222, 222, 222));
        FromDateComboBox.setEditable(true);
        getContentPane().add(FromDateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 160, -1));

        ToDateComboBox.setBackground(new java.awt.Color(222, 222, 222));
        ToDateComboBox.setEditable(true);
        getContentPane().add(ToDateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 160, -1));

        SearchDrawIdButton.setBackground(new java.awt.Color(49, 144, 226));
        SearchDrawIdButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        SearchDrawIdButton.setText("Προβολή δεδομένων");
        SearchDrawIdButton.setForeground(new java.awt.Color(0, 0, 0));
        SearchDrawIdButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchDrawIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDrawIdButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SearchDrawIdButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, -1, 30));

        SearchDateButton.setBackground(new java.awt.Color(49, 144, 226));
        SearchDateButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        SearchDateButton.setText("Αναζήτηση");
        SearchDateButton.setForeground(new java.awt.Color(0, 0, 0));
        SearchDateButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SearchDateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, -1, 30));

        deleteGameDataFromDateToDateButton.setBackground(new java.awt.Color(49, 144, 226));
        deleteGameDataFromDateToDateButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        deleteGameDataFromDateToDateButton.setText(" Διαγραφή δεδομένων κληρώσεων εντός εύρους ημερομηνιών ");
        deleteGameDataFromDateToDateButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteGameDataFromDateToDateButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteGameDataFromDateToDateButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        deleteGameDataFromDateToDateButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        deleteGameDataFromDateToDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGameDataFromDateToDateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteGameDataFromDateToDateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 470, -1, 30));

        deleteGameDataButton.setBackground(new java.awt.Color(49, 144, 226));
        deleteGameDataButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        deleteGameDataButton.setText("Διαγραφή δεδομένων κλήρωσης");
        deleteGameDataButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteGameDataButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteGameDataButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteGameDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        deleteGameDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGameDataButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteGameDataButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, -1, 30));

        fromDateLabel1.setLabelFor(FromDateComboBox);
        fromDateLabel1.setText("Από:");
        fromDateLabel1.setForeground(new java.awt.Color(222, 222, 222));
        getContentPane().add(fromDateLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 410, -1, 20));

        toDateLabel1.setLabelFor(ToDateComboBox);
        toDateLabel1.setText("Εώς:");
        toDateLabel1.setForeground(new java.awt.Color(222, 222, 222));
        getContentPane().add(toDateLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 440, -1, 20));

        GameIdComboBox1.setBackground(new java.awt.Color(222, 222, 222));
        GameIdComboBox1.setEditable(true);
        getContentPane().add(GameIdComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 320, 160, -1));

        FromDateComboBox1.setBackground(new java.awt.Color(222, 222, 222));
        FromDateComboBox1.setEditable(true);
        getContentPane().add(FromDateComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 410, 160, -1));

        ShowDataDateButton.setBackground(new java.awt.Color(49, 144, 226));
        ShowDataDateButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        ShowDataDateButton.setText("Προβολή δεδομένων");
        ShowDataDateButton.setForeground(new java.awt.Color(0, 0, 0));
        ShowDataDateButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ShowDataDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowDataDateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ShowDataDateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 100, -1, 30));

        gameIdLabel1.setBackground(backgroundLayer.getBackground());
        gameIdLabel1.setLabelFor(GameIdComboBox);
        gameIdLabel1.setText("Κωδικός κλήρωσης:");
        gameIdLabel1.setForeground(new java.awt.Color(222, 222, 222));
        gameIdLabel1.setToolTipText("");
        getContentPane().add(gameIdLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 320, -1, 20));

        ToDateComboBox1.setBackground(new java.awt.Color(222, 222, 222));
        ToDateComboBox1.setEditable(true);
        getContentPane().add(ToDateComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 440, 160, -1));

        backgroundLayer.setForeground(backgroundLayer.getBackground());
        backgroundLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tzoker_image2.jpg"))); // NOI18N
        backgroundLayer.setText("Game Id:");
        backgroundLayer.setFocusCycleRoot(true);
        backgroundLayer.setPreferredSize(new java.awt.Dimension(575, 435));
        getContentPane().add(backgroundLayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -270, 830, 1010));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void returnHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnHomeButtonActionPerformed
        //Δημιούργησε ένα αντικείμενο τύπου Home
        Home home = new Home();
        //Κάνε το αντικείμενο τύπου Home ορατό (Επιστροφή στην αρχική οθόνη)
        home.setVisible(true);
        //Κάνε το παράθυρο Διαχείρισης δεδομένων όχι ορατό
        this.setVisible(false);
        //Κλείσε το παράθυρο Διαχείρισης δεδομένων
        this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        //Κατέστρεψε το παράθυρο διαχείρισης δεδομένων
        this.dispose();
    }//GEN-LAST:event_returnHomeButtonActionPerformed

    private void deleteGameDataFromDateToDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGameDataFromDateToDateButtonActionPerformed
        //Αν ο χρήστης δεν έχει εισάγει ημερομηνίες
        if ((FromDateComboBox1.getSelectedItem() == null) || (ToDateComboBox1.getSelectedItem() == null)) {
            //Ενημερωτικό μήνυμα
            JOptionPane.showMessageDialog(null, "Πρέπει να εισάγετε εύρος ημερομηνιών.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            //Επιστροφή
            return;
        }

        //Έλεγχος αν ημερομηνία είναι σε σωστή μορφή
        DateValidator validator = new DateValidatorUsingDateFormat("yyyy-mm-dd");
        if (!validator.isValid(FromDateComboBox1.getSelectedItem().toString()) || !validator.isValid(ToDateComboBox1.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(null, "Οι ημερομηνίες δεν είναι σε σωστή μορφή (εεεε-μμ-ηη).", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        //Έλεγχος αν η ημερομηνία είναι έγκυρη (πχ 2022-02-30 είναι άκυρη ημερομηνία)
        try {
            LocalDate fromDate = LocalDate.parse(FromDateComboBox1.getSelectedItem().toString());
            LocalDate toDate = LocalDate.parse(ToDateComboBox1.getSelectedItem().toString());

            //Έλεγχος αν οι εισαγώμενες ημερομηνίες είναι μέχρι σήμερα
            if (LocalDate.now().isBefore(fromDate) || LocalDate.now().isBefore(toDate)) {
                JOptionPane.showMessageDialog(null, "Έχετε εισάγει ημερομηνίες που ξεπερνούν τη σημερινή ημέρα. Προσπαθήστε ξανά.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, "Μη έγκυρη ημερομηνία.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            //Kαθαρισμός ComboBox από άκυρες τιμές
            ToDateComboBox1.setSelectedItem(null);
            FromDateComboBox1.setSelectedItem(null);
            return;
        }

        //Υπολογίζουμε πόσες μέρες συνολικά έχει επιλέξει ο χρήστης. Αν το αποτέλεσμα είναι αρνητικό ο χρήστης έχει βάλει με λάθος σειρά τις ημερομηνίες
        LocalDate fromDate = LocalDate.parse(FromDateComboBox1.getSelectedItem().toString());
        LocalDate toDate = LocalDate.parse(ToDateComboBox1.getSelectedItem().toString());
        long fromDateDays = fromDate.toEpochDay();
        long toDateDays = toDate.toEpochDay();
        long duration = toDateDays - fromDateDays + 1;

        //Ενημερωτικό μήνυμα προς το χρήστη σε περίπτωση που η fromDate ημερομηνία είναι μεγαλύτερη από την toDate ημερομηνία
        if (duration < 0) {
            JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή εύρους ημερομηνιών. Προσπαθήστε ξανά. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        //Εμφάνιση παραθύρου στο χρήστη για επιβεβαίωση διαγραφής κληρώσεων 
        int result = JOptionPane.showConfirmDialog(null, "Tο σύστημα θα διαγράψει από τη βάση δεδομένων όλα τα δεδομένα των κληρώσεων από " + FromDateComboBox1.getSelectedItem()
                + " έως " + ToDateComboBox1.getSelectedItem() + ".\nΕίστε σίγουροι;", "Διαγραφή Δεδομένων Κλήρωσης", JOptionPane.YES_NO_OPTION);

        //Αν ο χρήστης πατήσει αποδοχή διαγραφής δεδομένων
        if (JOptionPane.YES_OPTION == result) {
            System.out.println("ΑΠΟΔΟΧΗ ΔΙΑΓΡΑΦΗΣ ΔΕΔΟΜΕΝΩΝ ΕΝΤΟΣ ΕΥΡΟΥΣ ΗΜΕΡΟΜΗΝΙΩΝ");

            //Δημιουργία EntityManagerFactory
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JokerGameStatsPU");
            //Δημιουργία EntityManager
            EntityManager em = emf.createEntityManager();

            //Προσπάθεια έναρξης δοσοληψίας με τη βάση δεδομένων
            try {
                //Έναρξη δοσοληψίας
                em.getTransaction().begin();
                //Δημιουργία ερώτησης προς βάση δεδομένων για να διαγράψει όλα τα δεδομένα από τον πίνακα Draw στο δοθέν εύρος ημερομηνιών
                Query findDraws = em.createNativeQuery("DELETE FROM DRAW WHERE DATE BETWEEN '" + FromDateComboBox1.getSelectedItem().toString() + "' AND '"
                        + ToDateComboBox1.getSelectedItem().toString() + "'");

                //Διαγραφή από πίνακα Draw όλων των δεδομένων σε συγκεκριμένο εύρος ημερομηνιών (αυτόματα διαγράφονται κι από τον πίνακα Prizecategory)
                findDraws.executeUpdate();

                //Tερματισμός δοσοληψίας
                em.getTransaction().commit();
                //Εμφάνιση ενημερωτικού μηνύματος
                JOptionPane.showMessageDialog(null, "Όσες κληρώσεις υπήρχαν από " + FromDateComboBox1.getSelectedItem().toString() + " έως "
                        + ToDateComboBox1.getSelectedItem().toString() + " διαγράφηκαν επιτυχώς από τη βάση δεδομένων. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                //Περίπτωση αποτυχίας σύνδεσης με τη βάση δεδομένων
            } catch (Exception e) {
                //Εμφάνιση ενημερωτικού μηνύματος ότι δεν πραγματοποιήθηκε διαγραφή
                JOptionPane.showMessageDialog(null, "Η διαγραφή δεν ήταν επιτυχής. Προσπαθήστε ξανά.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            }

            //Καταστροφή EntityManagerFactory και EntityManager
            em.close();
            emf.close();

        } //Aν ο χρήστης δεν αποδεχτεί τη διαγραφή δεδομένων
        else if (JOptionPane.NO_OPTION == result) {
            //TODO code
            System.out.println("MH ΑΠΟΔΟΧΗ ΔΙΑΓΡΑΦΗΣ ΔΕΔΟΜΕΝΩΝ ΕΝΤΟΣ ΕΥΡΟΥΣ ΗΜΕΡΟΜΗΝΙΩΝ");
        } //Αν ο χρήστης κλείσει το παράθυρο
        else //ΤΟDO code
        {
            System.out.println("ΚΛΕΙΣΙΜΟ ΠΑΡΑΘΥΡΟΥ");
        }
    }//GEN-LAST:event_deleteGameDataFromDateToDateButtonActionPerformed

    private void SearchDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDateButtonActionPerformed
        //Αποτέλεσμα αναζήτησης με εύρος ημερομηνιών

        //Καθαρίζουμε, αν υπάρχουν, τα δεδομένα του drawIdComboBox
        GameIdComboBox.removeAllItems();
        //Αν ο χρήστης έχει εισάγει ημερομηνίες
        if (((FromDateComboBox.getSelectedItem() != null) && (ToDateComboBox.getSelectedItem() != null))) {

            //Έλεγχος αν ημερομηνία είναι σε σωστή μορφή
            DateValidator validator = new DateValidatorUsingDateFormat("yyyy-mm-dd");
            if (!validator.isValid(FromDateComboBox.getSelectedItem().toString()) || !validator.isValid(ToDateComboBox.getSelectedItem().toString())) {
                JOptionPane.showMessageDialog(null, "Οι ημερομηνίες δεν είναι σε σωστή μορφή (εεεε-μμ-ηη).", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            //Έλεγχος αν η ημερομηνία είναι έγκυρη (πχ 2022-02-30 είναι άκυρη ημερομηνία)
            try {
                LocalDate fromDate = LocalDate.parse(FromDateComboBox.getSelectedItem().toString());
                LocalDate toDate = LocalDate.parse(ToDateComboBox.getSelectedItem().toString());

                //Έλεγχος αν οι εισαγώμενες ημερομηνίες είναι μέχρι σήμερα
                if (LocalDate.now().isBefore(fromDate) || LocalDate.now().isBefore(toDate)) {
                    JOptionPane.showMessageDialog(null, "Έχετε εισάγει ημερομηνίες που ξεπερνούν τη σημερινή ημέρα. Προσπαθήστε ξανά.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null, "Μη έγκυρη ημερομηνία.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            //Υπολογίζουμε από πόσες ημέρες επιλέγει ο χρήστης να αντλήσει πληροφορίες διότι μπορεί να αντλήσει πληροφορίες έως 3 μηνών (94 ημερών)
            LocalDate fromDate = LocalDate.parse(FromDateComboBox.getSelectedItem().toString());
            LocalDate toDate = LocalDate.parse(ToDateComboBox.getSelectedItem().toString());
            long fromDateDays = fromDate.toEpochDay();
            long toDateDays = toDate.toEpochDay();
            long duration = toDateDays - fromDateDays + 1;

            //Ενημερωτικό μήνυμα προς το χρήστη σε περίπτωση που η fromDate ημερομηνία είναι μεγαλύτερη από την toDate ημερομηνία
            if (duration < 0) {
                JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή εύρους ημερομηνιών. Προσπαθήστε ξανά. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            //Αρχικοποιούμε τη ζώνη ώρας γιατί θα μας χρειαστεί στις μετατροπές ημερομηνιών
            ZoneId defaultZoneId = ZoneId.systemDefault();
            //Δημιουργούμε μία λίστα με αντικείμενα τύπου Draw για να αποθηκεύσουμε τα δεδομένα που αντλούμε από το json

            //Αν το εύρος ημερομηνιών που εισάγει ο χρήστης ξεπερνάει τις 94 ημέρες
            //το url δεν επιστρέφει δεδομένα
            //Οπότε "σπάμε" τις ημερομηνίες σε κομμάτια και καλούμε το url για να αντλήσουμε δεδομένα ανά "κομμάτι"
            while (duration > 94) {
                toDate = fromDate.plusDays(93);
                Date dateTo = Date.from(toDate.atStartOfDay(defaultZoneId).toInstant());
                Date dateFrom = Date.from(fromDate.atStartOfDay(defaultZoneId).toInstant());
                String pattern = "yyyy-MM-dd";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                String df = simpleDateFormat.format(dateFrom);
                String dt = simpleDateFormat.format(dateTo);

                //Διαδικασία για κλήση url
                //Περνάμε το url που θα καλέσουμε σε ενα string
                String urlToCall = "https://api.opap.gr/draws/v3.0/5104/draw-date/" + df + "/" + dt + "/draw-id";
                OkHttpClient client = new OkHttpClient();

                Request request = new Request.Builder().url(urlToCall).build();

                //Καλούμε το κατάλληλο url 
                try (Response response = client.newCall(request).execute()) {
                    if (response.isSuccessful() && response.body() != null) {
                        String responseString = response.body().string();

                        //Διαδικασία άντλησης των δεδομένων του Json
                        //Δημιουργούμε ένα αντικείμενο GsonBuilder
                        GsonBuilder builder = new GsonBuilder();
                        Gson gson = builder.create();
                        //Παίρνουμε τα αποτελέσματα σε JsonArray 
                        JsonArray json = gson.fromJson(responseString, JsonArray.class);

                        //Περνάμε τα δεδομένα από το JsonArray στο GameIdComboBox
                        for (int i = 0; i < json.size(); i++) {
                            GameIdComboBox.addItem(json.get(i).toString());
                        }

                        //Yπολογίζουμε τις νέες ημερομηνίες για τις οποίες θα πραγματοποιηθεί κλήση Url
                        duration = duration - 94;
                        fromDate = toDate.plusDays(1);
                        if (duration == 0) {
                            break;
                        } else if (duration < 95) {
                            toDate = toDate.plusDays(duration);
                        }

                    } else {
                        //Ενημερωτικό μήνυμα σε περίπτωση λανθασμένης εισαγωγής ημερομηνιών (FromDate>ToDate)
                        JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή ημερομηνιών. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Πρόβλημα κλήσης URL. Προσπαθήστε ξανά.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            //Αν έχουν απομείνει μέρες που δεν αντλήσαμε δεδομένα υπαναυπολογισμός ημερομηνιών και επανάκληση url
            if (duration > 0 && duration < 95) {
                Date dateTo = Date.from(toDate.atStartOfDay(defaultZoneId).toInstant());
                Date dateFrom = Date.from(fromDate.atStartOfDay(defaultZoneId).toInstant());
                String pattern = "yyyy-MM-dd";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                String df = simpleDateFormat.format(dateFrom);
                String dt = simpleDateFormat.format(dateTo);

                //Διαδικασία για κλήση url
                //Περνάμε το url που θα καλέσουμε σε ενα string
                String urlToCall = "https://api.opap.gr/draws/v3.0/5104/draw-date/" + df + "/" + dt + "/draw-id";
                OkHttpClient client = new OkHttpClient();

                Request request = new Request.Builder().url(urlToCall).build();

                //Καλούμε το κατάλληλο url 
                try (Response response = client.newCall(request).execute()) {
                    if (response.isSuccessful() && response.body() != null) {
                        String responseString = response.body().string();

                        //Διαδικασία άντλησης των δεδομένων του Json
                        //Δημιουργούμε ένα αντικείμενο GsonBuilder
                        GsonBuilder builder = new GsonBuilder();
                        Gson gson = builder.create();
                        //Παίρνουμε τα αποτελέσματα σε JsonArray 
                        JsonArray json = gson.fromJson(responseString, JsonArray.class);

                        //Περνάμε τα δεδομένα από το JsonArray στο GameIdComboBox
                        for (int i = 0; i < json.size(); i++) {
                            GameIdComboBox.addItem(json.get(i).toString());
                        }

                    } else {
                        //ισως πρεπει να διαγραφει************************************************************
                        //Ενημερωτικό μήνυμα σε περίπτωση λανθασμένης εισαγωγής ημερομηνιών (FromDate>ToDate)
                        JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή ημερομηνιών. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Πρόβλημα κλήσης URL. Προσπαθήστε ξανά.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                }
            }

        } //Αν ο χρήστης πατήσει αναζήτηση χωρίς να έχει επιλέξει εύρος ημερομηνιών τότε του εμφανίζει ενημερωτικό μήνυμα  
        else if (((FromDateComboBox.getSelectedItem() == null) || (ToDateComboBox.getSelectedItem() == null))) {
            //Ενημερωτικό μήνυμα
            JOptionPane.showMessageDialog(null, "Πρέπει να εισάγετε ημερομηνίες. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_SearchDateButtonActionPerformed

    private void deleteGameDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGameDataButtonActionPerformed
        //Αν ο χρήστης δεν έχει εισάγει κωδικό κλήρωσης
        if ((GameIdComboBox1.getSelectedItem() == null)) {
            //Ενημερωτικό μήνυμα
            JOptionPane.showMessageDialog(null, "Πρέπει να εισάγετε αριθμό κλήρωσης παιχνιδιού.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            //Επιστροφή
            return;
        }

        //Έλεγος αν η εισαγώμενη προς διαγραφή κλήρωση είναι σε σωστή μορφή
        try {
            Integer.parseInt((String) GameIdComboBox1.getSelectedItem());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή δεδομένων.\nO αριθμός κλήρωσης αποτελείται μόνο από ακέραιους αριθμούς.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        //Eνημερωτικό μήνυμα προς χρήστη
        int result = JOptionPane.showConfirmDialog(null, "Tο σύστημα θα διαγράψει από τη βάση δεδομένων τα δεδομένα της κλήρωσης με αριθμό " + GameIdComboBox1.getSelectedItem()
                + ".\nΕίστε σίγουροι;", "Διαγραφή Δεδομένων Κλήρωσης", JOptionPane.YES_NO_OPTION);

        //Aν ο χρήστης επιβεβαιώσει τη διαγραφή της κλήρωσης από τη βάση δεδομένων
        if (JOptionPane.YES_OPTION == result) {
            System.out.println("ΑΠΟΔΟΧΗ ΔΙΑΓΡΑΦΗΣ");

            //Δημιουργία EntityManagerFactory
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("JokerGameStatsPU");
            //Δημιουργία EntityManager
            EntityManager em = emf.createEntityManager();

            //Προσπάθεια έναρξης δοσοληψίας με τη βάση δεδομένων για διαγραφή κλήρωσης
            try {
                //Έναρξη δοσοληψίας
                em.getTransaction().begin();
                //Διαγραφή εγγραφών με το επιλεγμένο drawId, από πίνακες βάσης δεδομένων 
                Query selectDraw = em.createNamedQuery("Draw.findById", Draw.class);
                selectDraw.setParameter("id", Integer.parseInt((String) GameIdComboBox1.getSelectedItem()));

                try {
                    Draw drawPj = (Draw) selectDraw.getSingleResult();
                    em.remove(drawPj);
                    //Tερματισμός δοσοληψίας
                    em.getTransaction().commit();
                    //Ενημερωτικό μήνυμα
                    JOptionPane.showMessageDialog(null, "Τα δεδομένα της κλήρωσης διαγράφηκαν επιτυχώς από τη βάση δεδομένων.", "Eνημέρωση", JOptionPane.INFORMATION_MESSAGE);

                } catch (NoResultException ex) {
                    //Tερματισμός δοσοληψίας
                    em.getTransaction().commit();
                    //Ενημερωτικό μήνυμα σε περίπτωση που επιλεγμένη προς διαγραφή κλήρωση, δεν υπάρχει
                    JOptionPane.showMessageDialog(null, "Η κλήρωση που επιλέξατε δεν είναι καταχωρημένη στη βάση δεδομένων.", "Eνημέρωση", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Η διαγραφή δεν ήταν επιτυχής. Προσπαθήστε ξανά.", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
            }

            //Καταστροφή EntityManagerFactory και EntityManager
            em.close();
            emf.close();
        }
        //Αν ο χρήστης απορρίψει τη διαγραφή της κλήρωσης από τη βάση δεδομένων δε συμβαίνει τίποτα


    }//GEN-LAST:event_deleteGameDataButtonActionPerformed

    private void SearchDrawIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDrawIdButtonActionPerformed
        //Αποτέλεσμα αναζήτησης με κωδικό κλήρωσης

        //Αν ο χρήστης πατήσει αναζήτηση βάση drawId αλλά δεν έχει εισάγει drawId εμφανίζεται σχετικό μήνυμα στην οθόνη
        if ((GameIdComboBox.getSelectedItem() == null)) {
            //Ενημερωτικό μήνυμα
            JOptionPane.showMessageDialog(null, "Πρέπει να εισάγετε αριθμό κλήρωσης παιχνιδιού.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
        } else if ((GameIdComboBox.getSelectedItem() != null)) {

            //Διαδικασία κλήσης url
            String urlToCall = "https://api.opap.gr/draws/v3.0/5104/" + GameIdComboBox.getSelectedItem().toString();
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder().url(urlToCall).build();

            try (Response response = client.newCall(request).execute()) {
                if (response.isSuccessful() && response.body() != null) {
                    String responseString = response.body().string();

                    //Διαδικασία άντλησης των δεδομένων του Json
                    //Δημιουργούμε ένα αντικείμενο GsonBuilder
                    GsonBuilder builder = new GsonBuilder();
                    builder.setPrettyPrinting();
                    Gson gson = builder.create();
                    //Δημιουργούμε ένα JsonObject που περιέχει το Json που αντλήσαμε
                    JsonObject jsonObj = gson.fromJson(responseString, JsonObject.class);
                    //Δημιουργούμε ένα JsonObject που περιέχει το JsonObject με όνομα winningNumbers
                    JsonObject winningNumbersObj = jsonObj.getAsJsonObject("winningNumbers");
                    //Δημιουργούμε ένα JsonArray που παίρνει ως ορίσματα τη λίστα που περιέχει τους winningNumbers
                    JsonArray winningNumbers = winningNumbersObj.getAsJsonArray("list");
                    //Δημιουργούμε ένα JsonArray που παίρνει ως ορίσματα τα περιεχόμενα του JsonArray με όνομα bonus
                    JsonArray bonus = winningNumbersObj.getAsJsonArray("bonus");
                    //Δημιουργούμε ένα JsonArray που παίρνει ως ορίσματα τα περιεχόμενα του JsonArray με όνομα prizeCategories
                    JsonArray prizeCategories = jsonObj.getAsJsonArray("prizeCategories");
                    //Aποθηκεύουμε στη μεταβλητή drawId τον αριθμό κλήρωσης που πήραμε από το JsonObject
                    int drawId = jsonObj.get("drawId").getAsInt();
                    //Αποθηκεύουμε στη μεταβλητή drawTime την ημερομηνία και ώρα που έγινε η κλήρωση και που πήραμε από το JsonObject
                    long drawTime = jsonObj.get("drawTime").getAsLong();

                    //Διαδικασία για να προβληθούν τα δεδομένα για συγκεκριμένο drawId (winningNumbers,βασικές κατηγορίες επιτυχιών 
                    //και για κάθε κατηγορία θέλουμε:winners,divident)
                    //Προσωρινή αποθήκευση δεδομένων κλήρωσης
                    int[] winningNumbersArray = new int[6];
                    for (int i = 0; i < 6; i++) {
                        int winningNumber;
                        if (i <= 4) {
                            winningNumber = winningNumbers.get(i).getAsInt();
                        } else {
                            winningNumber = bonus.get(0).getAsInt();
                        }
                        winningNumbersArray[i] = winningNumber;

                    }

                    //Επειδή θέλουμε να εμφανίζονται στον πίνακα τα αποτελέσματα μιας κλήρωσης κάθε φορά φτιάχνουμε νέο αντικείμενο
                    draw.prizeCategories = new ArrayList<PrizeCategory>();

                    //Αποθηκεύουμε τα δεδομένα που αντλούμε από το json
                    for (int i = 0; i < prizeCategories.size(); i++) {
                        JsonObject prizeCategory = prizeCategories.get(i).getAsJsonObject();
                        int winners = prizeCategories.get(i).getAsJsonObject().get("winners").getAsInt();
                        double divident = prizeCategories.get(i).getAsJsonObject().get("divident").getAsDouble();

                        //Αν η κλήρωση έχει αριθμό 1-209 τότε μετατροπή των δραχμών σε ευρώ και στρογγυλοποίηση αποτελέσματος στα 2 ψηφία
                        //θεωρούμε ότι η τότε συναλλαγματική αξία του ευρώ ήταν 1EURO=340.75GRD
                        if (drawId >= 1 && drawId <= 209) {
                            divident = Math.round((divident / 340.75) * 100.0) / 100.0;
                        }
                        PrizeCategory prc = new PrizeCategory(prizeCategory.get("id").getAsInt(), drawId, winners, divident);

                        draw.setId(drawId);
                        draw.setDrawTime(drawTime);
                        draw.setWinningNumber1(winningNumbersArray[0]);
                        draw.setWinningNumber2(winningNumbersArray[1]);
                        draw.setWinningNumber3(winningNumbersArray[2]);
                        draw.setWinningNumber4(winningNumbersArray[3]);
                        draw.setWinningNumber5(winningNumbersArray[4]);
                        draw.setBonusNumber(bonus.get(0).getAsInt());
                        draw.addCategory(prc);
                    }
                    //Δημιουργία αντικείμενου τύπου jframe DrawData για να εμφανίσουμε τα αποτελέσματα
                    DrawData drawData = new DrawData();
                    //Ενημέρωση πίνακα resultTable του jframe DrawData
                    drawData.UpdateResultTable(draw);
                    drawData.updateDrawData(draw);

                    //Εμφάνισε την οθόνη DrawData που περιέχει τον πίνακα με τα ζητούμενα δεδομένα
                    drawData.setVisible(true);
                } else {
                    //Ενημέρωση χρήστη σε περίπτωση που εισάγει λάθος δεδομένα ή η εισαγώμενη κλήρωση δεν υπάρχει
                    JOptionPane.showMessageDialog(null, "Η κλήρωση δεν υπάρχει. "
                            + "(Input= " + GameIdComboBox.getSelectedItem().toString() + ")", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Πρόβλημα κλήσης URL. Προσπαθήστε ξανά. "
                        + "(Input= " + GameIdComboBox.getSelectedItem().toString() + ")", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_SearchDrawIdButtonActionPerformed

    private void ShowDataDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDataDateButtonActionPerformed
        //Αποτέλεσμα αναζήτησης με εύρος ημερομηνιών

        //Αν ο χρήστης έχει εισάγει ημερομηνίες
        if (((FromDateComboBox.getSelectedItem() != null) && (ToDateComboBox.getSelectedItem() != null))) {

            //Έλεγχος αν ημερομηνία είναι σε σωστή μορφή
            DateValidator validator = new DateValidatorUsingDateFormat("yyyy-mm-dd");
            if (!validator.isValid(FromDateComboBox.getSelectedItem().toString()) || !validator.isValid(ToDateComboBox.getSelectedItem().toString())) {
                JOptionPane.showMessageDialog(null, "Οι ημερομηνίες δεν είναι σε σωστή μορφή (εεεε-μμ-ηη).", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            //Έλεγχος αν οι εισαγώμενες ημερομηνίες είναι μέχρι σήμερα
            //Έλεγχος αν η ημερομηνία είναι έγκυρη (πχ 2022-02-30 είναι άκυρη ημερομηνία)
            try {
                LocalDate fromDate = LocalDate.parse(FromDateComboBox.getSelectedItem().toString());
                LocalDate toDate = LocalDate.parse(ToDateComboBox.getSelectedItem().toString());

                //Έλεγχος αν οι εισαγώμενες ημερομηνίες είναι μέχρι σήμερα
                if (LocalDate.now().isBefore(fromDate) || LocalDate.now().isBefore(toDate)) {
                    JOptionPane.showMessageDialog(null, "Έχετε εισάγει ημερομηνίες που ξεπερνούν τη σημερινή ημέρα. Προσπαθήστε ξανά.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null, "Μη έγκυρη ημερομηνία.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            //Υπολογίζουμε από πόσες ημέρες επιλέγει ο χρήστης να αντλήσει πληροφορίες διότι μπορεί να αντλήσει πληροφορίες έως 3 μηνών (94 ημερών)
            LocalDate fromDate = LocalDate.parse(FromDateComboBox.getSelectedItem().toString());
            LocalDate toDate = LocalDate.parse(ToDateComboBox.getSelectedItem().toString());
            long fromDateDays = fromDate.toEpochDay();
            long toDateDays = toDate.toEpochDay();
            long duration = toDateDays - fromDateDays + 1;

            //Ενημερωτικό μήνυμα προς το χρήστη σε περίπτωση που η fromDate ημερομηνία είναι μεγαλύτερη από την toDate ημερομηνία
            if (duration < 0) {
                JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή εύρους ημερομηνιών. Προσπαθήστε ξανά. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            //Αρχικοποιούμε τη ζώνη ώρας γιατί θα μας χρειαστεί στις μετατροπές ημερομηνιών
            ZoneId defaultZoneId = ZoneId.systemDefault();
            //Δημιουργούμε μία λίστα με αντικείμενα τύπου Draw για να αποθηκεύσουμε τα δεδομένα που αντλούμε από το json
            ArrayList<Draws> draws = new ArrayList<>();
            //Αν το εύρος ημερομηνιών που εισάγει ο χρήστης ξεπερνάει τις 94 ημέρες
            //το url δεν επιστρέφει δεδομένα
            //Οπότε "σπάμε" τις ημερομηνίες σε κομμάτια και καλούμε το url για να αντλήσουμε δεδομένα ανά "κομμάτι"
            while (duration > 94) {
                toDate = fromDate.plusDays(93);
                Date dateTo = Date.from(toDate.atStartOfDay(defaultZoneId).toInstant());
                Date dateFrom = Date.from(fromDate.atStartOfDay(defaultZoneId).toInstant());
                String pattern = "yyyy-MM-dd";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                String df = simpleDateFormat.format(dateFrom);
                String dt = simpleDateFormat.format(dateTo);

                //Διαδικασία για κλήση url
                //Περνάμε το url που θα καλέσουμε σε ενα string
                String urlToCall = "https://api.opap.gr/draws/v3.0/5104/draw-date/" + df + "/" + dt + "/?limit=200";
                OkHttpClient client = new OkHttpClient();

                Request request = new Request.Builder().url(urlToCall).build();

                //Καλούμε το κατάλληλο url 
                try (Response response = client.newCall(request).execute()) {
                    if (response.isSuccessful() && response.body() != null) {
                        String responseString = response.body().string();

                        //Διαδικασία άντλησης των δεδομένων του Json
                        //Δημιουργούμε ένα αντικείμενο GsonBuilder
                        GsonBuilder builder = new GsonBuilder();
                        Gson gson = builder.create();
                        //Δημιουργούμε ένα JsonObject που περιέχει το Json που αντλήσαμε
                        JsonObject jsonObj = gson.fromJson(responseString, JsonObject.class);
                        //Δημιουργούμε ενα JsonArray που περιέχει τα Objects 
                        JsonArray content = jsonObj.getAsJsonArray("content");

                        //Aντλούμε τα επιθυμητά δεδομένα από το json και τα περνάμε σε αντικείμενα τύπου Draw
                        for (JsonElement draw : content) {
                            int drawId = draw.getAsJsonObject().get("drawId").getAsInt();
                            long drawTime = draw.getAsJsonObject().get("drawTime").getAsLong();
                            JsonArray winningNumbers = draw.getAsJsonObject().get("winningNumbers").getAsJsonObject().get("list").getAsJsonArray();
                            JsonArray bonusNumbers = draw.getAsJsonObject().get("winningNumbers").getAsJsonObject().get("bonus").getAsJsonArray();
                            JsonArray prizeCategories = draw.getAsJsonObject().get("prizeCategories").getAsJsonArray();
                            Draws drawObj = new Draws(drawId, drawTime);
                            drawObj.setWinningNumber1(winningNumbers.get(0).getAsInt());
                            drawObj.setWinningNumber2(winningNumbers.get(1).getAsInt());
                            drawObj.setWinningNumber3(winningNumbers.get(2).getAsInt());
                            drawObj.setWinningNumber4(winningNumbers.get(3).getAsInt());
                            drawObj.setWinningNumber5(winningNumbers.get(4).getAsInt());
                            drawObj.setBonusNumber(bonusNumbers.get(0).getAsInt());
                            drawObj.setDrawTime(drawTime);

                            //Αντλούμε τα επιθυμητά δεδομένα από το json και τα περνάμε σε αντικείμενα τύπου PrizeCategory
                            for (JsonElement prizeCategory : prizeCategories) {
                                double divident = prizeCategory.getAsJsonObject().get("divident").getAsDouble();
                                int winners = prizeCategory.getAsJsonObject().get("winners").getAsInt();
                                int prizeCategoryId = prizeCategory.getAsJsonObject().get("id").getAsInt();
                                PrizeCategory prizeCategoryObj = new PrizeCategory(prizeCategoryId, drawId, winners, divident);

                                drawObj.addCategory(prizeCategoryObj);
                            }
                            draws.add(drawObj);
                        }

                        //Yπολογίζουμε τις νέες ημερομηνίες για τις οποίες θα πραγματοποιηθεί κλήση Url
                        duration = duration - 94;
                        fromDate = toDate.plusDays(1);
                        if (duration == 0) {
                            break;
                        } else if (duration < 95) {
                            toDate = toDate.plusDays(duration);
                        }

                    } else {
                        //Ενημερωτικό μήνυμα σε περίπτωση λανθασμένης εισαγωγής ημερομηνιών (FromDate>ToDate)
                        JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή ημερομηνιών. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Πρόβλημα κλήσης URL. Προσπαθήστε ξανά.", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            //Αν έχουν απομείνει μέρες που δεν αντλήσαμε δεδομένα επαναϋπολογισμός ημερομηνιών και επανάκληση url
            if (duration > 0 && duration < 95) {
                Date dateTo = Date.from(toDate.atStartOfDay(defaultZoneId).toInstant());
                Date dateFrom = Date.from(fromDate.atStartOfDay(defaultZoneId).toInstant());
                String pattern = "yyyy-MM-dd";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
                String df = simpleDateFormat.format(dateFrom);
                String dt = simpleDateFormat.format(dateTo);

                //Διαδικασία για κλήση url
                //Περνάμε το url που θα καλέσουμε σε ενα string
                String urlToCall = "https://api.opap.gr/draws/v3.0/5104/draw-date/" + df + "/" + dt + "/?limit=200";
                OkHttpClient client = new OkHttpClient();

                Request request = new Request.Builder().url(urlToCall).build();

                //Καλούμε το κατάλληλο url 
                try (Response response = client.newCall(request).execute()) {
                    if (response.isSuccessful() && response.body() != null) {
                        String responseString = response.body().string();

                        //Διαδικασία άντλησης των δεδομένων του Json
                        //Δημιουργούμε ένα αντικείμενο GsonBuilder
                        GsonBuilder builder = new GsonBuilder();
                        Gson gson = builder.create();
                        //Δημιουργούμε ένα JsonObject που περιέχει το Json που αντλήσαμε
                        JsonObject jsonObj = gson.fromJson(responseString, JsonObject.class);

                        //Δημιουργούμε ενα JsonArray που περιέχει τα Objects 
                        JsonArray content = jsonObj.getAsJsonArray("content");

                        //Αντλούμε τα επιθυμητά δεδομένα από το json και τα περνάμε σε αντικείμενα τύπου Draw
                        for (JsonElement draw : content) {
                            int drawId = draw.getAsJsonObject().get("drawId").getAsInt();
                            long drawTime = draw.getAsJsonObject().get("drawTime").getAsLong();
                            JsonArray winningNumbers = draw.getAsJsonObject().get("winningNumbers").getAsJsonObject().get("list").getAsJsonArray();
                            JsonArray bonusNumbers = draw.getAsJsonObject().get("winningNumbers").getAsJsonObject().get("bonus").getAsJsonArray();
                            JsonArray prizeCategories = draw.getAsJsonObject().get("prizeCategories").getAsJsonArray();
                            Draws drawObj = new Draws(drawId, drawTime);
                            drawObj.setWinningNumber1(winningNumbers.get(0).getAsInt());
                            drawObj.setWinningNumber2(winningNumbers.get(1).getAsInt());
                            drawObj.setWinningNumber3(winningNumbers.get(2).getAsInt());
                            drawObj.setWinningNumber4(winningNumbers.get(3).getAsInt());
                            drawObj.setWinningNumber5(winningNumbers.get(4).getAsInt());
                            drawObj.setBonusNumber(bonusNumbers.get(0).getAsInt());
                            drawObj.setDrawTime(drawTime);

                            //Aντλούμε τα επιθμητά δεδομένα από το json και τα περνάμε σε αντικείμενα τύπου PrizeCategory
                            for (JsonElement prizeCategory : prizeCategories) {
                                double divident = prizeCategory.getAsJsonObject().get("divident").getAsDouble();
                                int winners = prizeCategory.getAsJsonObject().get("winners").getAsInt();
                                int prizeCategoryId = prizeCategory.getAsJsonObject().get("id").getAsInt();
                                PrizeCategory prizeCategoryObj = new PrizeCategory(prizeCategoryId, drawId, winners, divident);

                                drawObj.addCategory(prizeCategoryObj);
                            }
                            draws.add(drawObj);
                        }

                    } else {
                        //Ενημερωτικό μήνυμα σε περίπτωση λανθασμένης εισαγωγής ημερομηνιών (FromDate>ToDate)
                        JOptionPane.showMessageDialog(null, "Λάθος εισαγωγή ημερομηνιών. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Πρόβλημα κλήσης URL. Προσπαθήστε ξανά.", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            //Δημιουργούμε ένα jframe στο οποίο θα εμφανιστούν τα αποτελέσματα
            DynamicDrawData dynamicDrawData = new DynamicDrawData();
            //Ενημερώνουμε τον πίνακα που θα προβληθεί στο jframe dynamicDrawData προβολής δεδομένων κληρώσεων 
            dynamicDrawData.updateTables(draws);
            //Kάνουμε ορατό το jframe dynamicDrawData προβολής δεδομένων κληρώσεων
            dynamicDrawData.setVisible(true);

        } //Αν ο χρήστης πατήσει αναζήτηση χωρίς να έχει επιλέξει εύρος ημερομηνιών τότε του εμφανίζει ενημερωτικό μήνυμα  
        else if (((FromDateComboBox.getSelectedItem() == null) || (ToDateComboBox.getSelectedItem() == null))) {
            //Ενημερωτικό μήνυμα
            JOptionPane.showMessageDialog(null, "Πρέπει να εισάγετε ημερομηνίες. ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ShowDataDateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new ManageData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FromDateComboBox;
    private javax.swing.JComboBox<String> FromDateComboBox1;
    private javax.swing.JComboBox<String> GameIdComboBox;
    private javax.swing.JComboBox<String> GameIdComboBox1;
    private javax.swing.JButton SearchDateButton;
    private javax.swing.JButton SearchDrawIdButton;
    private javax.swing.JButton ShowDataDateButton;
    private javax.swing.JComboBox<String> ToDateComboBox;
    private javax.swing.JComboBox<String> ToDateComboBox1;
    private javax.swing.JLabel backgroundLayer;
    private javax.swing.JButton deleteGameDataButton;
    private javax.swing.JButton deleteGameDataFromDateToDateButton;
    private javax.swing.JLabel fromDateLabel;
    private javax.swing.JLabel fromDateLabel1;
    private javax.swing.JLabel gameIdLabel;
    private javax.swing.JLabel gameIdLabel1;
    private javax.swing.JLabel manageDataLabel;
    private javax.swing.JButton returnHomeButton;
    private javax.swing.JLabel toDateLabel;
    private javax.swing.JLabel toDateLabel1;
    // End of variables declaration//GEN-END:variables
}
